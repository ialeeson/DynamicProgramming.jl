### Uniform
struct Uniform{F}
    lower::F
    upper::F
end
_grid(grid_type::Uniform, n) =
    range(grid_type.lower, grid_type.upper, n)
_weights(grid_type::Uniform, n) = nothing

### Markov
struct Markov{I,F}
    π::Matrix{F}
    lower::I
    upper::I
end
Markov(π) = Markov(π, missing, missing)
_grid(grid_type::Markov{Missing}, n) =
    grid_type.lower:1:grid_type.upper
_grid(grid_type::Markov{Float64}, n) =
    range(grid_type.lower, grid_type.upper, n)
_weights(grid_type::Uniform, n) = nothing

### Rowenhorst
@concrete struct Rowenhorst
    ρ
    σ
end
_grid(g::Rowenhorst, n) = range(-sqrt(n-1)*sqrt(g.σ^2/(1-g.ρ^2)), sqrt(n-1)*sqrt(g.σ^2/(1-g.ρ^2)), n)
_weights(grid_type::Rowenhorst, n) = itensor(rowenhorst(grid_type.ρ, grid_type.σ, n), Index(n), Index(n))
function rowenhorst(ρ::F, σ::F, n) where F
    P, P′ = (Matrix{F}(undef, n, n) for i in 1:2)
    q = 0.5*(1+ρ)
    ψ = sqrt(n-1) * sqrt(σ^2/(1-ρ^2))
    iterations = n - 2
    P[1,1] = q
    P[1,2] = 1-q
    P[2,1] = 1-q
    P[2,2] = q
    for iter in 1:iterations
        n = iter+1
        @inbounds P′[1,1] = q * (P[1,1]) 
        for s in 2:n
            @inbounds P′[s,1] = q*P[s,1] + (1-q)*P[s-1,1]
        end
        @inbounds P′[n+1,1] = (1-q) * (P[n,1])
        for j in 2:n
            @inbounds P′[1,j] = 0.5*(q*P[1,j]+(1-q)*P[1,j-1])
            for s in 2:n
                @inbounds P′[s,j] = 0.5*(q*P[s,j]+(1-q)*P[s-1,j]+q*P[s-1,j-1]+(1-q)*P[s,j-1])
            end
            @inbounds P′[n+1,j] = 0.5*((1-q)*P[n,j]+q*P[n,j-1])
        end
        @inbounds P′[1,n+1] = (1-q)*P[1,n]
        for s in 2:n
            @inbounds P′[s,n+1] = q*P[s-1,n]+(1-q)*P[s,n]
        end
        @inbounds P′[n+1,n+1] = q*P[n,n]
        for j in 1:n+1
            for i in 1:n+1
                @inbounds P[i,j] = P′[i,j]
            end
        end
    end
    collect(transpose(P))
end
